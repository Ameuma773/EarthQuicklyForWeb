const JMAPoints = [];

const AreaCode = ["100", "101", "102", "105", "106", "107", "110", "115", "116", "117", "119", "120", "121", "122", "125", "126", "127", "130", "131", "135", "136", "139", "140", "141", "142", "145", "146", "150", "151", "152", "155", "156", "157", "160", "161", "165", "166", "167", "200", "201", "202", "203", "210", "211", "212", "213", "220", "221", "222", "230", "231", "232", "233", "240", "241", "242", "243", "250", "251", "252", "300", "301", "310", "311", "320", "321", "330", "331", "332", "340", "341", "342", "350", "351", "352", "354", "355", "356", "357", "358", "359", "360", "361", "370", "371", "372", "375", "380", "381", "390", "391", "400", "401", "411", "412", "420", "421", "422", "430", "431", "432", "440", "441", "442", "443", "450", "451", "460", "461", "462", "500", "501", "510", "511", "520", "521", "530", "531", "532", "535", "540", "550", "551", "560", "562", "563", "570", "571", "575", "580", "581", "590", "591", "592", "600", "601", "610", "611", "620", "621", "622", "630", "631", "632", "700", "702", "703", "704", "710", "711", "712", "713", "720", "721", "730", "731", "732", "735", "736", "737", "740", "741", "742", "743", "750", "751", "752", "753", "760", "761", "762", "763", "770", "771", "774", "775", "776", "777", "778", "779", "800", "801", "802", "803", "804", "805", "806", "807"];

const AreaName = ["石狩地方北部", "石狩地方中部", "石狩地方南部", "渡島地方北部", "渡島地方東部", "渡島地方西部", "檜山地方", "後志地方北部", "後志地方東部", "後志地方西部", "北海道奥尻島", "空知地方北部", "空知地方中部", "空知地方南部", "上川地方北部", "上川地方中部", "上川地方南部", "留萌地方中北部", "留萌地方南部", "宗谷地方北部", "宗谷地方南部", "北海道利尻礼文", "網走地方", "北見地方", "紋別地方", "胆振地方西部", "胆振地方中東部", "日高地方西部", "日高地方中部", "日高地方東部", "十勝地方北部", "十勝地方中部", "十勝地方南部", "釧路地方北部", "釧路地方中南部", "根室地方北部", "根室地方中部", "根室地方南部", "青森県津軽北部", "青森県津軽南部", "青森県三八上北", "青森県下北", "岩手県沿岸北部", "岩手県沿岸南部", "岩手県内陸北部", "岩手県内陸南部", "宮城県北部", "宮城県南部", "宮城県中部", "秋田県沿岸北部", "秋田県沿岸南部", "秋田県内陸北部", "秋田県内陸南部", "山形県庄内", "山形県最上", "山形県村山", "山形県置賜", "福島県中通り", "福島県浜通り", "福島県会津", "茨城県北部", "茨城県南部", "栃木県北部", "栃木県南部", "群馬県北部", "群馬県南部", "埼玉県北部", "埼玉県南部", "埼玉県秩父", "千葉県北東部", "千葉県北西部", "千葉県南部", "東京都２３区", "東京都多摩東部", "東京都多摩西部", "神津島", "伊豆大島", "新島", "三宅島", "八丈島", "小笠原", "神奈川県東部", "神奈川県西部", "新潟県上越", "新潟県中越", "新潟県下越", "新潟県佐渡", "富山県東部", "富山県西部", "石川県能登", "石川県加賀", "福井県嶺北", "福井県嶺南", "山梨県中・西部", "山梨県東部・富士五湖", "長野県北部", "長野県中部", "長野県南部", "岐阜県飛騨", "岐阜県美濃東部", "岐阜県美濃中西部", "静岡県伊豆", "静岡県東部", "静岡県中部", "静岡県西部", "愛知県東部", "愛知県西部", "三重県北部", "三重県中部", "三重県南部", "滋賀県北部", "滋賀県南部", "京都府北部", "京都府南部", "大阪府北部", "大阪府南部", "兵庫県北部", "兵庫県南東部", "兵庫県南西部", "兵庫県淡路島", "奈良県", "和歌山県北部", "和歌山県南部", "鳥取県東部", "鳥取県中部", "鳥取県西部", "島根県東部", "島根県西部", "島根県隠岐", "岡山県北部", "岡山県南部", "広島県北部", "広島県南東部", "広島県南西部", "徳島県北部", "徳島県南部", "香川県東部", "香川県西部", "愛媛県東予", "愛媛県中予", "愛媛県南予", "高知県東部", "高知県中部", "高知県西部", "山口県北部", "山口県西部", "山口県東部", "山口県中部", "福岡県福岡", "福岡県北九州", "福岡県筑豊", "福岡県筑後", "佐賀県北部", "佐賀県南部", "長崎県北部", "長崎県南西部", "長崎県島原半島", "長崎県対馬", "長崎県壱岐", "長崎県五島", "熊本県阿蘇", "熊本県熊本", "熊本県球磨", "熊本県天草・芦北", "大分県北部", "大分県中部", "大分県南部", "大分県西部", "宮崎県北部平野部", "宮崎県北部山沿い", "宮崎県南部平野部", "宮崎県南部山沿い", "鹿児島県薩摩", "鹿児島県大隅", "鹿児島県十島村", "鹿児島県甑島", "鹿児島県種子島", "鹿児島県屋久島", "鹿児島県奄美北部", "鹿児島県奄美南部", "沖縄県本島北部", "沖縄県本島中南部", "沖縄県久米島", "沖縄県大東島", "沖縄県宮古島", "沖縄県石垣島", "沖縄県与那国島", "沖縄県西表島"];

const CityCode = ["0110100", "0110200", "0110300", "0110400", "0110500", "0110600", "0110700", "0110800", "0110900", "0111000", "0120600", "0120800", "0123300", "0134600", "0148400", "0160100", "0410100", "0410200", "0410300", "0410400", "0410500", "0421300", "0421500", "0442100", "0520100", "0521000", "0620300", "0620400", "0720300", "0734400", "1110100", "1110200", "1110300", "1110400", "1110500", "1110600", "1110700", "1110800", "1110900", "1111000", "1210100", "1210200", "1210300", "1210400", "1210500", "1210600", "1410100", "1410200", "1410300", "1410400", "1410500", "1410600", "1410700", "1410800", "1410900", "1411000", "1411100", "1411200", "1411300", "1411400", "1411500", "1411600", "1411700", "1411800", "1413100", "1413200", "1413300", "1413400", "1413500", "1413600", "1413700", "1415100", "1415200", "1415300", "1510100", "1510200", "1510300", "1510400", "1510500", "1510600", "1510700", "1510800", "1620100", "2020100", "2020200", "2020500", "2020900", "2021500", "2210100", "2210200", "2210300", "2213100", "2213200", "2213300", "2213400", "2213500", "2213600", "2213700", "2310100", "2310200", "2310300", "2310400", "2310500", "2310600", "2310700", "2310800", "2310900", "2311000", "2311100", "2311200", "2311300", "2311400", "2311500", "2311600", "2321100", "2420100", "2420400", "2520100", "2620100", "2621200", "2621300", "2621400", "2640700", "2646500", "2710200", "2710300", "2710400", "2710600", "2710700", "2710800", "2710900", "2711100", "2711300", "2711400", "2711500", "2711600", "2711700", "2711800", "2711900", "2712000", "2712100", "2712200", "2712300", "2712400", "2712500", "2712600", "2712700", "2712800", "2714100", "2714200", "2714300", "2714400", "2714500", "2714600", "2714700", "2810100", "2810200", "2810500", "2810600", "2810700", "2810800", "2810900", "2811000", "2811100", "2920700", "3020600", "3120100", "3139000", "3310100", "3310200", "3310300", "3310400", "3410100", "3410200", "3410300", "3410400", "3410500", "3410600", "3410700", "3410800", "3620500", "3620600", "3620700", "3620800", "3636800", "3638700", "3638800", "3646800", "3648900", "4010100", "4010300", "4010500", "4010600", "4010700", "4010800", "4010900", "4013100", "4013200", "4013300", "4013400", "4013500", "4013600", "4013700", "4220900", "4221200", "4310100", "4310200", "4310300", "4310400", "4310500", "4320200", "4321500", "4344700", "4735700", "4735800", "0120200", "0120300", "0120400", "0120500", "0120700", "0120900", "0121000", "0121100", "0121200", "0121300", "0121400", "0121500", "0121600", "0121700", "0121800", "0121900", "0122000", "0122100", "0122200", "0122300", "0122400", "0122500", "0122600", "0122700", "0122800", "0122900", "0123000", "0123100", "0123400", "0123500", "0123600", "0130300", "0130400", "0133100", "0133200", "0133300", "0133400", "0133700", "0134300", "0134500", "0134700", "0136100", "0136200", "0136300", "0136400", "0136700", "0137000", "0137100", "0139100", "0139200", "0139300", "0139400", "0139500", "0139600", "0139700", "0139800", "0139900", "0140000", "0140100", "0140200", "0140300", "0140400", "0140500", "0140600", "0140700", "0140800", "0140900", "0142300", "0142400", "0142500", "0142700", "0142800", "0142900", "0143000", "0143100", "0143200", "0143300", "0143400", "0143600", "0143700", "0143800", "0145200", "0145300", "0145400", "0145500", "0145600", "0145700", "0145800", "0145900", "0146000", "0146100", "0146200", "0146300", "0146400", "0146500", "0146800", "0146900", "0147000", "0147100", "0147200", "0148100", "0148200", "0148300", "0148500", "0148600", "0148700", "0151100", "0151200", "0151300", "0151400", "0151600", "0151700", "0151800", "0151900", "0152000", "0154300", "0154400", "0154500", "0154600", "0154700", "0154900", "0155000", "0155200", "0155500", "0155900", "0156000", "0156100", "0156200", "0156300", "0156400", "0157100", "0157500", "0157800", "0158100", "0158400", "0158500", "0158600", "0160200", "0160400", "0160700", "0160800", "0160900", "0161000", "0163100", "0163200", "0163300", "0163400", "0163500", "0163600", "0163700", "0163800", "0163900", "0164100", "0164200", "0164300", "0164400", "0164500", "0164600", "0164700", "0164800", "0164900", "0166100", "0166200", "0166300", "0166400", "0166500", "0166700", "0166800", "0169100", "0169200", "0169300", "0169400", "0220100", "0220200", "0220300", "0220400", "0220500", "0220600", "0220700", "0220800", "0220900", "0221000", "0230100", "0230300", "0230400", "0230700", "0232100", "0232300", "0234300", "0236100", "0236200", "0236700", "0238100", "0238400", "0238700", "0240100", "0240200", "0240500", "0240600", "0240800", "0241100", "0241200", "0242300", "0242400", "0242500", "0242600", "0244100", "0244200", "0244300", "0244500", "0244600", "0245000", "0320100", "0320200", "0320300", "0320500", "0320600", "0320700", "0320800", "0320900", "0321000", "0321100", "0321300", "0321400", "0321500", "0321600", "0330100", "0330200", "0330300", "0332100", "0332200", "0336600", "0338100", "0340200", "0344100", "0346100", "0348200", "0348300", "0348400", "0348500", "0350100", "0350300", "0350600", "0350700", "0352400", "0420200", "0420300", "0420500", "0420600", "0420700", "0420800", "0420900", "0421100", "0421200", "0421400", "0421600", "0430100", "0430200", "0432100", "0432200", "0432300", "0432400", "0434100", "0436100", "0436200", "0440100", "0440400", "0440600", "0442200", "0442400", "0444400", "0444500", "0450100", "0450500", "0458100", "0460600", "0520200", "0520300", "0520400", "0520600", "0520700", "0520900", "0521100", "0521200", "0521300", "0521400", "0521500", "0530300", "0532700", "0534600", "0534800", "0534900", "0536100", "0536300", "0536600", "0536800", "0543400", "0546300", "0546400", "0620100", "0620200", "0620500", "0620600", "0620700", "0620800", "0620900", "0621000", "0621100", "0621200", "0621300", "0630100", "0630200", "0632100", "0632200", "0632300", "0632400", "0634100", "0636100", "0636200", "0636300", "0636400", "0636500", "0636600", "0636700", "0638100", "0638200", "0640100", "0640200", "0640300", "0642600", "0642800", "0646100", "0720100", "0720200", "0720400", "0720500", "0720700", "0720800", "0720900", "0721000", "0721100", "0721200", "0721300", "0721400", "0730100", "0730300", "0730800", "0732200", "0734200", "0736200", "0736400", "0736700", "0736800", "0740200", "0740500", "0740700", "0740800", "0742100", "0742200", "0742300", "0744400", "0744500", "0744600", "0744700", "0746100", "0746400", "0746500", "0746600", "0748100", "0748200", "0748300", "0748400", "0750100", "0750200", "0750300", "0750400", "0750500", "0752100", "0752200", "0754100", "0754200", "0754300", "0754400", "0754500", "0754600", "0754700", "0754800", "0756100", "0756400", "0820100", "0820200", "0820300", "0820400", "0820500", "0820700", "0820800", "0821000", "0821100", "0821200", "0821400", "0821500", "0821600", "0821700", "0821900", "0822000", "0822100", "0822200", "0822300", "0822400", "0822500", "0822600", "0822700", "0822800", "0822900", "0823000", "0823100", "0823200", "0823300", "0823400", "0823500", "0823600", "0830200", "0830900", "0831000", "0834100", "0836400", "0844200", "0844300", "0844700", "0852100", "0854200", "0854600", "0856400", "0920100", "0920200", "0920300", "0920400", "0920500", "0920600", "0920800", "0920900", "0921000", "0921100", "0921300", "0921400", "0921500", "0921600", "0930100", "0934200", "0934300", "0934400", "0934500", "0936100", "0936400", "0938400", "0938600", "0940700", "0941100", "1020100", "1020200", "1020300", "1020400", "1020500", "1020600", "1020700", "1020800", "1020900", "1021000", "1021100", "1021200", "1034400", "1034500", "1036600", "1036700", "1038200", "1038300", "1038400", "1042100", "1042400", "1042500", "1042600", "1042800", "1042900", "1044300", "1044400", "1044800", "1044900", "1046400", "1052100", "1052200", "1052300", "1052400", "1052500", "1120100", "1120200", "1120300", "1120600", "1120700", "1120800", "1120900", "1121000", "1121100", "1121200", "1121400", "1121500", "1121600", "1121700", "1121800", "1121900", "1122100", "1122200", "1122300", "1122400", "1122500", "1122700", "1122800", "1122900", "1123000", "1123100", "1123200", "1123300", "1123400", "1123500", "1123700", "1123800", "1123900", "1124000", "1124100", "1124200", "1124300", "1124500", "1124600", "1130100", "1132400", "1132600", "1132700", "1134100", "1134200", "1134300", "1134600", "1134700", "1134800", "1134900", "1136100", "1136200", "1136300", "1136500", "1136900", "1138100", "1138300", "1138500", "1140800", "1144200", "1146400", "1146500", "1220200", "1220300", "1220400", "1220500", "1220600", "1220700", "1220800", "1221000", "1221100", "1221200", "1221300", "1221500", "1221600", "1221700", "1221800", "1221900", "1222000", "1222100", "1222200", "1222300", "1222400", "1222500", "1222600", "1222700", "1222800", "1222900", "1223000", "1223100", "1223200", "1223300", "1223400", "1223500", "1223600", "1223700", "1223800", "1223900", "1232200", "1232900", "1234200", "1234700", "1234900", "1240300", "1240900", "1241000", "1242100", "1242200", "1242300", "1242400", "1242600", "1242700", "1244100", "1244300", "1246300", "1310100", "1310200", "1310300", "1310400", "1310500", "1310600", "1310700", "1310800", "1310900", "1311000", "1311100", "1311200", "1311300", "1311400", "1311500", "1311600", "1311700", "1311800", "1311900", "1312000", "1312100", "1312200", "1312300", "1320100", "1320200", "1320300", "1320400", "1320500", "1320600", "1320700", "1320800", "1320900", "1321000", "1321100", "1321200", "1321300", "1321400", "1321500", "1321800", "1321900", "1322000", "1322100", "1322200", "1322300", "1322400", "1322500", "1322700", "1322800", "1322900", "1330300", "1330500", "1330700", "1330800", "1336100", "1336200", "1336300", "1336400", "1338100", "1338200", "1340100", "1340200", "1342100", "1420100", "1420300", "1420400", "1420500", "1420600", "1420700", "1420800", "1421000", "1421100", "1421200", "1421300", "1421400", "1421500", "1421600", "1421700", "1421800", "1430100", "1432100", "1434100", "1434200", "1436100", "1436200", "1436300", "1436400", "1436600", "1438200", "1438300", "1438400", "1440100", "1440200", "1520200", "1520400", "1520500", "1520600", "1520800", "1520900", "1521000", "1521100", "1521200", "1521300", "1521600", "1521700", "1521800", "1522200", "1522300", "1522400", "1522500", "1522600", "1522700", "1530700", "1534200", "1536100", "1538500", "1540500", "1546100", "1548200", "1550400", "1558100", "1558600", "1620200", "1620400", "1620500", "1620600", "1620700", "1620800", "1620900", "1621000", "1621100", "1632100", "1632200", "1632300", "1634200", "1634300", "1720100", "1720200", "1720300", "1720400", "1720500", "1720600", "1720700", "1720900", "1721000", "1721100", "1721200", "1732400", "1736100", "1736500", "1738400", "1738600", "1740700", "1746100", "1746300", "1820100", "1820200", "1820400", "1820500", "1820600", "1820700", "1820800", "1820900", "1821000", "1832200", "1838200", "1840400", "1842300", "1844200", "1848100", "1848300", "1850100", "1920100", "1920200", "1920400", "1920500", "1920600", "1920700", "1920800", "1920900", "1921000", "1921100", "1921200", "1921300", "1921400", "1934600", "1936400", "1936500", "1936600", "1936800", "1938400", "1942200", "1942300", "1942400", "1942500", "1942900", "1943000", "1944200", "1944300", "2020300", "2020400", "2020600", "2020700", "2020800", "2021000", "2021100", "2021200", "2021300", "2021400", "2021700", "2021800", "2021900", "2022000", "2030300", "2030400", "2030500", "2030600", "2030700", "2030900", "2032100", "2032300", "2032400", "2034900", "2035000", "2036100", "2036200", "2036300", "2038200", "2038300", "2038400", "2038500", "2038600", "2038800", "2040200", "2040300", "2040400", "2040700", "2040900", "2041000", "2041100", "2041200", "2041300", "2041400", "2041500", "2041600", "2041700", "2042200", "2042300", "2042500", "2042900", "2043000", "2043200", "2044600", "2044800", "2045000", "2045100", "2045200", "2048100", "2048200", "2048500", "2048600", "2052100", "2054100", "2054300", "2056100", "2056200", "2056300", "2058300", "2058800", "2059000", "2060200", "2120100", "2120200", "2120300", "2120400", "2120500", "2120600", "2120700", "2120800", "2120900", "2121000", "2121100", "2121200", "2121300", "2121400", "2121500", "2121600", "2121700", "2121800", "2121900", "2122000", "2122100", "2130200", "2130300", "2134100", "2136100", "2136200", "2138100", "2138200", "2138300", "2140100", "2140300", "2140400", "2142100", "2150100", "2150200", "2150300", "2150400", "2150500", "2150600", "2150700", "2152100", "2160400", "2220300", "2220500", "2220600", "2220700", "2220800", "2220900", "2221000", "2221100", "2221200", "2221300", "2221400", "2221500", "2221600", "2221900", "2222000", "2222100", "2222200", "2222300", "2222400", "2222500", "2222600", "2230100", "2230200", "2230400", "2230500", "2230600", "2232500", "2234100", "2234200", "2234400", "2242400", "2242900", "2246100", "2320100", "2320200", "2320300", "2320400", "2320500", "2320600", "2320700", "2320800", "2320900", "2321000", "2321200", "2321300", "2321400", "2321500", "2321600", "2321700", "2321900", "2322000", "2322100", "2322200", "2322300", "2322400", "2322500", "2322600", "2322700", "2322800", "2322900", "2323000", "2323100", "2323200", "2323300", "2323400", "2323500", "2323600", "2323700", "2323800", "2330200", "2334200", "2336100", "2336200", "2342400", "2342500", "2342700", "2344100", "2344200", "2344500", "2344600", "2344700", "2350100", "2356100", "2356200", "2356300", "2420200", "2420300", "2420500", "2420700", "2420800", "2420900", "2421000", "2421100", "2421200", "2421400", "2421500", "2421600", "2430300", "2432400", "2434100", "2434300", "2434400", "2444100", "2444200", "2444300", "2446100", "2447000", "2447100", "2447200", "2454300", "2456100", "2456200", "2520200", "2520300", "2520400", "2520600", "2520700", "2520800", "2520900", "2521000", "2521100", "2521200", "2521300", "2521400", "2538300", "2538400", "2542500", "2544100", "2544200", "2544300", "2610100", "2610200", "2610300", "2610400", "2610500", "2610600", "2610700", "2610800", "2610900", "2611000", "2611100", "2620200", "2620300", "2620400", "2620500", "2620600", "2620700", "2620800", "2620900", "2621000", "2621100", "2630300", "2632200", "2634300", "2634400", "2636400", "2636500", "2636600", "2636700", "2646300", "2720200", "2720300", "2720400", "2720500", "2720600", "2720700", "2720800", "2720900", "2721000", "2721100", "2721200", "2721300", "2721400", "2721500", "2721600", "2721700", "2721800", "2721900", "2722000", "2722100", "2722200", "2722300", "2722400", "2722500", "2722600", "2722700", "2722800", "2722900", "2723000", "2723100", "2723200", "2730100", "2732100", "2732200", "2734100", "2736100", "2736200", "2736600", "2738100", "2738200", "2738300", "2820100", "2820200", "2820300", "2820400", "2820500", "2820600", "2820700", "2820800", "2820900", "2821000", "2821200", "2821300", "2821400", "2821500", "2821600", "2821700", "2821800", "2821900", "2822000", "2822100", "2822200", "2822300", "2822400", "2822500", "2822600", "2822700", "2822800", "2822900", "2830100", "2836500", "2838100", "2838200", "2844200", "2844300", "2844600", "2846400", "2848100", "2850100", "2858500", "2858600", "2920100", "2920200", "2920300", "2920400", "2920500", "2920600", "2920800", "2920900", "2921000", "2921100", "2921200", "2932200", "2934200", "2934300", "2934400", "2934500", "2936100", "2936200", "2936300", "2938500", "2938600", "2940100", "2940200", "2942400", "2942500", "2942600", "2942700", "2944100", "2944200", "2944300", "2944400", "2944600", "2944700", "2944900", "2945000", "2945100", "2945200", "2945300", "3020100", "3020200", "3020300", "3020400", "3020500", "3020700", "3020800", "3020900", "3030400", "3034100", "3034300", "3034400", "3036100", "3036200", "3036600", "3038100", "3038200", "3038300", "3039000", "3039100", "3039200", "3040100", "3040400", "3040600", "3042100", "3042200", "3042400", "3042700", "3042800", "3120200", "3120300", "3120400", "3130200", "3132500", "3132800", "3132900", "3136400", "3137000", "3137100", "3137200", "3138400", "3138600", "3138900", "3140100", "3140200", "3140300", "3220100", "3220200", "3220300", "3220400", "3220500", "3220600", "3220700", "3220900", "3234300", "3238600", "3244100", "3244800", "3244900", "3250100", "3250500", "3252500", "3252600", "3252700", "3252800", "3320200", "3320300", "3320400", "3320500", "3320700", "3320800", "3320900", "3321000", "3321100", "3321200", "3321300", "3321400", "3321500", "3321600", "3334600", "3342300", "3344500", "3346100", "3358600", "3360600", "3362200", "3362300", "3364300", "3366300", "3366600", "3368100", "3420200", "3420300", "3420400", "3420500", "3420700", "3420800", "3420900", "3421000", "3421100", "3421200", "3421300", "3421400", "3421500", "3430200", "3430400", "3430700", "3430900", "3436800", "3436900", "3443100", "3446200", "3454500", "3520100", "3520200", "3520300", "3520400", "3520600", "3520700", "3520800", "3521000", "3521100", "3521200", "3521300", "3521500", "3521600", "3530500", "3532100", "3534100", "3534300", "3534400", "3550200", "3620100", "3620200", "3620300", "3620400", "3630100", "3630200", "3632100", "3634100", "3634200", "3640100", "3640200", "3640300", "3640400", "3640500", "3720100", "3720200", "3720300", "3720400", "3720500", "3720600", "3720700", "3720800", "3732200", "3732400", "3734100", "3736400", "3738600", "3738700", "3740300", "3740400", "3740600", "3820100", "3820200", "3820300", "3820400", "3820500", "3820600", "3820700", "3821000", "3821300", "3821400", "3821500", "3835600", "3838600", "3840100", "3840200", "3842200", "3844200", "3848400", "3848800", "3850600", "3920100", "3920200", "3920300", "3920400", "3920500", "3920600", "3920800", "3920900", "3921000", "3921100", "3921200", "3930100", "3930200", "3930300", "3930400", "3930500", "3930600", "3930700", "3934100", "3934400", "3936300", "3936400", "3938600", "3938700", "3940100", "3940200", "3940300", "3940500", "3941000", "3941100", "3941200", "3942400", "3942700", "3942800", "4020200", "4020300", "4020400", "4020500", "4020600", "4020700", "4021000", "4021100", "4021200", "4021300", "4021400", "4021500", "4021600", "4021700", "4021800", "4021900", "4022000", "4022100", "4022300", "4022400", "4022500", "4022600", "4022700", "4022800", "4022900", "4023000", "4023100", "4034100", "4034200", "4034300", "4034400", "4034500", "4034800", "4034900", "4038100", "4038200", "4038300", "4038400", "4040100", "4040200", "4042100", "4044700", "4044800", "4050300", "4052200", "4054400", "4060100", "4060200", "4060400", "4060500", "4060800", "4060900", "4061000", "4062100", "4062500", "4064200", "4064600", "4064700", "4120100", "4120200", "4120300", "4120400", "4120500", "4120600", "4120700", "4120800", "4120900", "4121000", "4132700", "4134100", "4134500", "4134600", "4138700", "4140100", "4142300", "4142400", "4142500", "4144100", "4220100", "4220300", "4220400", "4220700", "4220800", "4221000", "4221100", "4221300", "4221400", "4230700", "4230800", "4232100", "4232200", "4232300", "4238300", "4239100", "4241100", "4320300", "4320400", "4320500", "4320600", "4320800", "4321000", "4321100", "4321200", "4321300", "4321400", "4321600", "4334800", "4336400", "4336700", "4336800", "4336900", "4340300", "4340400", "4342300", "4342400", "4342500", "4342800", "4343200", "4343300", "4344100", "4344200", "4344300", "4344400", "4346800", "4348200", "4348400", "4350100", "4350500", "4350600", "4350700", "4351000", "4351100", "4351200", "4351300", "4351400", "4353100", "4420100", "4420200", "4420300", "4420400", "4420500", "4420600", "4420700", "4420800", "4420900", "4421000", "4421100", "4421200", "4421300", "4421400", "4432200", "4434100", "4446100", "4446200", "4520100", "4520200", "4520300", "4520400", "4520500", "4520600", "4520700", "4520800", "4520900", "4534100", "4536100", "4538200", "4538300", "4540100", "4540200", "4540300", "4540400", "4540500", "4540600", "4542100", "4542900", "4543000", "4543100", "4544100", "4544200", "4544300", "4620100", "4620300", "4620400", "4620600", "4620800", "4621000", "4621300", "4621400", "4621600", "4621700", "4621800", "4621900", "4622000", "4622100", "4622200", "4622300", "4622400", "4622500", "4630300", "4630400", "4639200", "4640400", "4645200", "4646800", "4648200", "4649000", "4649100", "4649200", "4650100", "4650200", "4650500", "4652300", "4652400", "4652500", "4652700", "4652900", "4653000", "4653100", "4653200", "4653300", "4653400", "4653500", "4720100", "4720500", "4720700", "4720800", "4720900", "4721000", "4721100", "4721200", "4721300", "4721400", "4721500", "4730100", "4730200", "4730300", "4730600", "4730800", "4731100", "4731300", "4731400", "4731500", "4732400", "4732500", "4732600", "4732700", "4732800", "4732900", "4734800", "4735000", "4735300", "4735400", "4735500", "4735600", "4735900", "4736000", "4736100", "4736200", "4737500", "4738100", "4738200", "3638300", "4220202", "4220201", "4621502", "4621501", "4220500"];

const Saibun_Center_Latitude = ['43.4140196981624', '42.994157744658125', '42.84618308283292', '42.31311417072291', '41.8946230705069', '41.59306689695711', '42.130602359894546', '43.16710078792288', '42.8295192766729', '42.85060443806004', '42.16210643603938', '43.79542223295022', '43.50321927720144', '43.14646488600037', '44.371691585550394', '43.74035000431906', '43.19264436665243', '44.5152237984344', '43.9356345320833', '45.16360232668413', '44.84263748484812', '45.290386111979196', '43.86011809910126', '43.79189569936449', '44.1669042311665', '42.626485383965175', '42.67801961478722', '42.730101745448835', '42.502088121731035', '42.218652777779226', '43.359024978980855', '42.880986559019924', '42.521281316792575', '43.5384804776061', '43.20019458757639', '43.86301107808741', '43.42155586319326', '43.366790188956166', '40.89416504534065', '40.57398656083618', '40.60395462013106', '41.30418953912554', '39.844810311914976', '39.19661151346954', '39.929417161903956', '39.2182898176523', '38.73409572623581', '38.03022896411516', '38.39185113507765', '40.09810793899304', '39.45195690214556', '40.170197973797364', '39.436616227814085', '38.703701487986145', '38.77983970747924', '38.37101146937291', '38.00574535767346', '37.40250517657715', '37.38533633890514', '37.423155629592166', '36.56724051016283', '36.100327254123435', '36.85364447447675', '36.53375228031119', '36.70248335513197', '36.32546490178717', '36.122588084922356', '35.90184338580338', '35.98763190264805', '35.64861359778091', '35.68309117927697', '35.20890343885054', '35.66812388361732', '35.667237028663386', '35.7910854990455', '34.2115120532872', '34.736597734810374', '34.40830645602961', '34.016745816111644', '32.594146000110825', '26.27936844952873', '35.407957844187095', '35.419289071399604', '37.0015560890844', '37.22707967431174', '37.93403408909082', '38.062976668933594', '36.60630349228206', '36.600921225164186', '37.165068654426', '36.37628226176463', '35.94888873457917', '35.55044186562927', '35.62562601465109', '35.591842932296935', '36.67425371402741', '36.14402245918822', '35.67491664219022', '36.08357760035934', '35.47647869674208', '35.645908023853806', '34.88895804324638', '35.190839751242486', '35.14921951996496', '34.92913117926324', '34.903060181866806', '35.06162447248947', '35.01545060021379', '34.61843945164003', '34.20351610457925', '35.41285589847905', '35.034024937010855', '35.483070091249814', '35.019536362119545', '34.802123304112676', '34.43925038219843', '35.43841211843255', '34.91388085552355', '34.96504290040942', '34.37673635318788', '34.30460243982897', '34.09568863955189', '33.76885146412081', '35.38404129500548', '35.387174771421705', '35.29114956293046', '35.28340790044515', '34.77098700426666', '36.14918723406873', '35.09411757636774', '34.697163130804626', '34.788445334956855', '34.50003136081807', '34.316755257610815', '34.03314434961517', '33.77822624994084', '34.366241752671485', '34.23169109027324', '34.05465357096728', '33.781933071271354', '33.298084405693416', '33.52501875928274', '33.6180312589743', '33.09665670518522', '34.392313325092196', '34.117164348259045', '34.02015283991218', '34.1455254643489', '33.62965478613823', '33.76872274327631', '33.627211124457865', '33.249522938040805', '33.409647599162085', '33.23892725426812', '33.25371705984713', '32.86770414897458', '32.73103668698577', '34.38993290146133', '33.781070555246735', '32.87313084267668', '32.95183226563334', '32.718036326538375', '32.28544100598483', '32.35770288783889', '33.51217138053579', '33.219217226428725', '32.92964985893657', '33.15955319111721', '32.4538960231606', '32.48118222851707', '31.737100882302883', '31.915821590620176', '31.74851069933518', '31.404309384010613', '29.66689321326619', '31.774628570182987', '30.65057089344532', '30.37402583725418', '28.263044848495714', '27.552130830473093', '26.6728093037938', '26.268054843460668', '26.581879005381033', '25.885078331776285', '24.795634347688235', '24.53144192984102', '24.455400905281294', '24.303328951814674'];


const Saibun_Center_Longitude = ['141.48864122300776', '141.26457595202777', '141.5173068925439', '140.24874823707523', '140.71631282936917', '140.18558725112365', '140.1219665121437', '140.78847221712962', '140.84447349941507', '140.35254127753032', '139.4802035112186', '141.95131765596918', '141.99596083909847', '141.91132325774964', '142.40093566617466', '142.65077863777555', '142.50315138366184', '141.8792093764835', '141.7379231587026', '141.95049865703209', '142.41936816911036', '141.11037054627624', '144.50910980300904', '143.64525979995165', '143.07200651473065', '140.89321440212137', '141.6512227836343', '142.43119782704014', '142.5968686655508', '142.99376984917646', '143.3120435291027', '143.2518307450022', '143.14037600357193', '144.41366808900366', '144.48472826730026', '145.0340435286804', '145.0694277487438', '145.74954097413885', '140.65901080518992', '140.3712777933173', '141.20865464548064', '141.11017971584567', '141.73666594347026', '141.7306982781256', '141.21053868318765', '141.177168997106', '141.14694954651318', '140.62075251401515', '141.16376733617957', '140.08472210164553', '140.2192815319253', '140.57920513188537', '140.56240284321836', '139.9033633416077', '140.2972931030225', '140.25738778280206', '139.96746802724812', '140.43698317730076', '140.80024953770192', '139.70457664907272', '140.43882760506608', '140.2380566804913', '139.791817513589', '139.83699500402923', '138.92439148007824', '139.08439108941468', '139.347259390643', '139.5341448529735', '138.96050412035288', '140.44265509250215', '140.11765670306596', '140.04582089617122', '139.7521345922302', '139.41785056795663', '139.1483754243677', '139.14341211090525', '139.39972002212392', '139.26237724156846', '139.54281365158684', '139.85790788356513', '142.38282338166636', '139.57718022948185', '139.16401290475324', '138.14076037915825', '138.90799493585178', '139.4246237383158', '138.3809138943442', '137.40408928235055', '136.94052392303573', '136.96222407275565', '136.64495213295453', '136.41975970179828', '135.8344553219899', '138.4949580609657', '138.88073337555142', '138.12207306698602', '138.1528982122556', '137.82069639589665', '137.18046921631034', '137.30977942989776', '136.71399361265438', '138.94649568064273', '138.78367502689895', '138.23562804960346', '137.8905848020192', '137.42868033114806', '137.092779964588', '136.51810783993133', '136.28322860559655', '136.4198964433086', '136.15994482019047', '136.11720600607137', '135.20374776259945', '135.68723368777924', '135.50859725908415', '135.38825051707136', '134.72571333016285', '135.12590993203167', '134.56650551207187', '134.84319045916365', '135.8709613211748', '135.32992506892273', '135.69050678161665', '134.23633690981652', '133.80354078534538', '133.3665346514448', '132.94539654554666', '132.19411771131078', '133.13964499758663', '133.8544844037572', '133.8562476139585', '132.74634041277253', '133.17399112895077', '132.54326455266246', '134.2104256698741', '134.38594316962346', '134.17489141741854', '133.7781828421469', '133.18304286544492', '132.800577223886', '132.51045126834993', '134.05728170025833', '133.50176241906584', '132.91238058180582', '131.32532312493615', '131.08327150872663', '132.13735615049896', '131.66570378765692', '130.37651544663865', '130.9010599774507', '130.74355528602865', '130.61570290119346', '129.92064562368924', '130.22407477263988', '129.66584307875092', '129.8201553277433', '130.2371257791725', '129.326806797966', '129.70871567133406', '128.92827868117124', '131.10852335439662', '130.76696861012252', '130.8607000873612', '130.29305593182755', '131.38167463266106', '131.61734065754015', '131.74275117008932', '131.15053210962697', '131.53206245683413', '131.25970808285894', '131.29951398431228', '131.04392919746832', '130.429893790694', '130.92582186594123', '129.66932421379155', '129.80603469481977', '130.7702953539211', '130.43917120836923', '129.41935560422957', '128.7718737891934', '127.9809513225852', '127.69274079109363', '126.99840083916979', '131.26907108162516', '125.19548259591335', '124.17353737725615', '122.9848907253411', '123.85056525076993'];

const colorList = { "a": "#00000000", "b": "#00000000", "c": "#00000000", "d": "#0000CD", "e": "#00a8af", "f": "#06d481", "g": "#1fe55e", "h": "#36f63e", "i": "#65fb28", "j": "#88fc1f", "k": "#beff0d", "l": "#d7fe07", "m": "#effe01", "n": "#fef802", "o": "#feea00", "p": "#ffdc02", "q": "#fcbd00", "r": "#fc9e00", "s": "#fc8100", "t": "#fa6300", "u": "#ff4400", "v": "#fc2800", "w": "#f60d00", "x": "#e90000", "y": "#ce0000", "z": "#b00201" };

var KMoni_Use = 0;
if (localStorage.getItem('KyoshinMonitor_Use') != null) {
    KMoni_Use = Number(localStorage.getItem('KyoshinMonitor_Use'));
}

var AreaMaxShindo = Array(808);
var CityMaxShindo = Array(1897);

GetJson();

var map = L.map('map', { preferCanvas: true, zoomControl: false, worldCopyJump: true, minZoom: 3, maxZoom: 12 }).setView([36.575, 135.984], 5);
var geojsonLayer_Japan;
var geojsonLayer_Saibun;
var geojsonLayer_Cities;

var PW;
var SW;

var radius = 2.5;

var PointList;

var zoom;

var Moji_Layer = new L.layerGroup();
var Filled_Layer;
var KMoni_Layer = new L.layerGroup();

//var JsonString_Japan = "";
var JsonString_Saibun;
var JsonString_Cities;

var Auto_changed = false;

//0=観測点表示, 1=観測点、細分区域, 2=細分区域のみ
var Quake_Mode = 2;
if (localStorage.getItem('Quake_Mode') != null) {
    Quake_Mode = Number(localStorage.getItem('Quake_Mode'));
}

var EEW_Use = 1;

var footer_open = false;

var Color_1 = "#46646e";
var MojiColor_1 = "#ffffff";
var Color_2 = "#1e6ee6";
var MojiColor_2 = "#ffffff";
var Color_3 = "#00c8c8";
var MojiColor_3 = "#000000";
var Color_4 = "#ffff64";
var MojiColor_4 = "#000000";
var Color_50 = "#ffb400";
var MojiColor_50 = "#000000";
var Color_55 = "#ff7800";
var MojiColor_55 = "#000000";
var Color_60 = "#e60000";
var MojiColor_60 = "#ffffff";
var Color_65 = "#a00000";
var MojiColor_65 = "#ffffff";
var Color_7 = "#960096";
var MojiColor_7 = "#ffffff";
var Color_0 = "#008b8b";
var MojiColor_0 = "#ffffff";

map.on('zoomend', function () {
    zoom = map.getZoom();
    if (zoom > 9) {
        map.addLayer(geojsonLayer_Cities);
    } else {
        map.removeLayer(geojsonLayer_Cities);
    }
    if (zoom > 7) {
        map.addLayer(Moji_Layer);
    } else {
        map.removeLayer(Moji_Layer);
    }
    
    if(zoom > 10){
        radius = 15;
    }else if(zoom > 9){
        radius = 12;
    }else if(zoom > 8){
        radius = 10;
    }else if(zoom > 7){
        radius = 7;
    }else if(zoom > 6){
        radius = 4;
    }else if(zoom > 5){
        radius = 2;
    }else{
        radius = 0.5;
    }

    console.log("ズームレベル : " + zoom);

    //FillPolygon(2,"2610400","#FF0000");
});

if (localStorage.getItem('QuakeInterval') != null) {
    GetQuakeInterval = Number(localStorage.getItem('QuakeInterval')) * 1000;
}

//var tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//attribution: '© <a href="http://osm.org/copyright">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
//maxZoom: 19
//});
//tileLayer.addTo(map);

var myPolygonStyle_0 = {
    "fillColor": "#494A49",
    fillOpacity: 1
}

var myPolygonStyle_1 = {
    "color": "#FFFFFF",
    "weight": 0.6,
    "opacity": 0.5,
    fillOpacity: 0
}

var myPolygonStyle_2 = {
    "color": "#FFFFFF",
    "weight": 0.7,
    "opacity": 0.5,
    fillOpacity: 0
}

var myPolygonStyle_3 = {
    "color": "#FFFFFF",
    "weight": 0.9,
    "fillColor": "#494A49",
    fillOpacity: 1
}

async function geojson() {
    var response_0 = fetch("Source/Countries.json")
        .then(response_0 => response_0.json())
        .then(data => {
            geojsonLayer_Japan = L.geoJSON(data, {
                style: myPolygonStyle_3,
                onEachFeature: function (feature, layer) {
                    //layer.options.smoothFactor = 1.5;
                }
            });
            map.addLayer(geojsonLayer_Japan);
        }).then(data => {
            var response_1 = fetch("Source/Japan.json")
                .then(response_1 => response_1.json())
                .then(data => {
                    geojsonLayer_Japan = L.geoJSON(data, {
                        style: myPolygonStyle_3,
                        onEachFeature: function (feature, layer) {
                            //layer.options.smoothFactor = 1.5;
                        }
                    });
                    map.addLayer(geojsonLayer_Japan);
                }).then(data => {
                    var response_2 = fetch("Source/Saibun.json")
                        .then(response_2 => response_2.json())
                        .then(data => {
                            geojsonLayer_Saibun = L.geoJSON(data, {
                                style: myPolygonStyle_2,
                                onEachFeature: function (feature, layer) {
                                    //layer.options.smoothFactor = 1.5;
                                }
                            });
                            map.addLayer(geojsonLayer_Saibun);
                            JsonString_Saibun = data;
                        }).then(data => {
                            var response_3 = fetch("Source/Cities.json")
                                .then(response_3 => response_3.json())
                                .then(data => {
                                    geojsonLayer_Cities = L.geoJSON(data, {
                                        style: myPolygonStyle_1,
                                        onEachFeature: function (feature, layer) {
                                            //簡素化
                                            //layer.options.smoothFactor = 1.5;
                                        }
                                    });
                                    //GEOJSONレイヤーをオーバーレイレイヤーに追加
                                    map.addLayer(geojsonLayer_Cities);
                                    JsonString_Cities = data;
                                })
                                .then(data => {
                                    GetQuake();
                                    setInterval(GetEEW, 1000);
                                    setInterval(GetQuake, GetQuakeInterval);

                                    PW = L.circle([0, 0], {
                                        radius: 0,
                                        color: 'darkcyan',
                                        fillOpacity: 0,
                                        weight: 2,
                                        opacity: 0.8
                                    }).addTo(map);

                                    SW = L.circle([0, 0], {
                                        radius: 0,
                                        color: 'orange',
                                        fillColor: 'red',
                                        fillOpacity: 0.1,
                                        weight: 2,
                                        opacity: 0.8
                                    }).addTo(map);
                                }).then(data => {
                                    document.getElementById("Loading").style.visibility = "hidden";
                                })

                            response_0 = null;
                            response_1 = null;
                            response_2 = null;
                            response_3 = null;
                        })
                })
        })
        var response_100 = fetch("https://weather-kyoshin.east.edge.storage-yahoo.jp/SiteList/sitelist.json")
        .then(response_100 => response_100.json())
        .then(data => {
            PointList = data;
        })
}

geojson();

var JMAPointsJson;
var QuakeJson;
var id;
var marker = L.featureGroup();
var EEWJson;
var anyMin = 0;
var NowMode = 0;
var GetTiming = 0;
var GetEEWInterval = 2;
var GetQuakeInterval = 30000;

if (localStorage.getItem('EEWInterval') != null) {
    GetEEWInterval = localStorage.getItem('EEWInterval');
}

let select = document.querySelector('[name="num"]');

select.onchange = event => {
    console.log(select.selectedIndex);
    QuakeSelect(select.selectedIndex);
}

async function GetQuake() {
    var date = new Date();

    const url = "https://api.p2pquake.net/v2/history?codes=551&limit=50";

    const response = await fetch(url)
        .then(response => response.json())
        .then(data => {
            QuakeJson = data;
            if (id != QuakeJson[0]["id"]) {
                id = QuakeJson[0]["id"];
                QuakeSelect(0);

                Auto_changed = true;

                var list = document.getElementById('QuakeList');
                while (list.lastChild) {
                    list.removeChild(list.lastChild);
                }

                var int = 0;
                QuakeJson.forEach(element => {
                    if (element["earthquake"]["maxScale"] == 10) {
                        maxScale = "1";
                        maxColor = "rgb(70, 100, 110)";
                        MojiColor = "rgb(255, 255, 255)";
                    } else if (element["earthquake"]["maxScale"] == 20) {
                        maxScale = "2";
                        maxColor = "rgb(30, 110, 230)";
                        MojiColor = "rgb(255, 255, 255)";
                    } else if (element["earthquake"]["maxScale"] == 30) {
                        maxScale = "3";
                        maxColor = "rgb(0, 200, 200)";
                        MojiColor = "rgb(0, 0, 0)";
                    } else if (element["earthquake"]["maxScale"] == 40) {
                        maxScale = "4";
                        maxColor = "rgb(250, 250, 100)";
                        MojiColor = "rgb(0, 0, 0)";
                    } else if (element["earthquake"]["maxScale"] == 45) {
                        maxScale = "5弱";
                        maxColor = "rgb(255, 180, 0)";
                        MojiColor = "rgb(0, 0, 0)";
                    } else if (element["earthquake"]["maxScale"] == 50) {
                        maxScale = "5強";
                        maxColor = "rgb(255, 120, 0)";
                        MojiColor = "rgb(0, 0, 0)";
                    } else if (element["earthquake"]["maxScale"] == 55) {
                        maxScale = "6弱";
                        maxColor = "rgb(230, 0, 0)";
                        MojiColor = "rgb(255, 255, 255)";
                    } else if (element["earthquake"]["maxScale"] == 60) {
                        maxScale = "6強";
                        maxColor = "rgb(160, 0, 0)";
                        MojiColor = "rgb(255, 255, 255)";
                    } else if (element["earthquake"]["maxScale"] == 70) {
                        maxScale = "7";
                        maxColor = "rgb(150, 0, 150)";
                        MojiColor = "rgb(255, 255, 255)";
                    } else {
                        maxScale = "不明";
                        maxColor = "rgb(0, 139, 139)";
                        MojiColor = "rgb(255, 255, 255)";
                    }
                    const option = document.createElement("option");
                    var Kibo = Number(QuakeJson[int]["earthquake"]["hypocenter"]["magnitude"]).toFixed(1);
                    if (Kibo == -1) {
                        Kibo = "不明";
                    }
                    var text;
                    if (QuakeJson[int]["issue"]["type"] != "ScalePrompt" && QuakeJson[int]["issue"]["type"] != "Foreign") {
                        text = QuakeJson[int]["earthquake"]["time"].slice(0, -3) + " " + QuakeJson[int]["earthquake"]["hypocenter"]["name"] + " " + "M" + Kibo + "\n" + "\n最大震度 : " + maxScale + " ";
                    } else if (QuakeJson[int]["issue"]["type"] == "Foreign") {
                        text = "【遠地地震】" + QuakeJson[int]["earthquake"]["time"].slice(0, -3) + " " + QuakeJson[int]["earthquake"]["hypocenter"]["name"] + " " + "M" + Kibo;
                    } else {
                        text = "【震度速報】" + QuakeJson[int]["points"][0]["addr"] + "など " + "\n" + QuakeJson[int]["earthquake"]["time"].slice(0, -3) + "\n最大震度 : " + maxScale + " ";
                    }

                    option.value = "" + int + "";
                    option.textContent = text;

                    list.appendChild(option)
                    int++;
                })
            }
        });
}

function QuakeSelect(num) {
    NowMode = 0;
    document.getElementById("NowMode").innerText = "地震情報画面";
    PW.setRadius(0);
    SW.setRadius(0);

    marker = L.featureGroup();

    map.eachLayer(function (layer) {

        if (layer.myTag && layer.myTag === "Shindo") {
            map.removeLayer(layer)
        }
        if (layer.myTag && layer.myTag === "Shingen") {
            map.removeLayer(layer)
        }
        layer = null;
    });

    Filled_Layer = null;
    Moji_Layer.clearLayers();

    if (QuakeJson[num]["issue"]["type"] != "ScalePrompt") {
        var geojsonFeature = [{
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [QuakeJson[num]["earthquake"]["hypocenter"]["longitude"], QuakeJson[num]["earthquake"]["hypocenter"]["latitude"]]
            }
        }];
        L.geoJson(geojsonFeature,
            {
                onEachFeature: function (feature, layer) {
                    if (feature.properties && feature.properties.popupContent) {
                        layer.bindPopup(feature.properties.popupContent);
                    }
                    layer.myTag = "Shingen"
                },
                pointToLayer: function (feature, latlng) {
                    var myIcon = L.icon({
                        iconUrl: 'Source/Singen.png',
                        iconSize: [50, 50],
                        popupAnchor: [0, -40]
                    });
                    return L.marker(latlng, { icon: myIcon, zIndexOffset: 100 });
                }
            }
        ).addTo(map).bindPopup("震源地 : " + QuakeJson[num]["earthquake"]["hypocenter"]["name"] + "<br>震源の深さ : " + QuakeJson[num]["earthquake"]["hypocenter"]["depth"] + "km");

        marker.addLayer(L.geoJson(geojsonFeature,
            {
                onEachFeature: function (feature, layer) {
                    if (feature.properties && feature.properties.popupContent) {
                        layer.bindPopup(feature.properties.popupContent);
                    }
                    layer.myTag = "Shingen"
                },
                pointToLayer: function (feature, latlng) {
                    var myIcon = L.icon({
                        iconUrl: 'Source/Singen.png',
                        iconSize: [50, 50],
                        popupAnchor: [0, -40]
                    });
                    return L.marker(latlng, { icon: myIcon });
                }
            }
        ));
        AreaMaxShindo = Array(808);
        CityMaxShindo = Array(1897);

        map.eachLayer(function (layer) {

            if (layer.myTag && layer.myTag === "Filled") {
                map.removeLayer(layer)
            }
        })

        QuakeJson[num]["points"].forEach(element => {

            var result = JMAPoints.indexOf(element["addr"]);
            if (result != -1) {

                var ImgUrl = "";
                var PointShindo = "";
                var PointColor;
                var PointInt;
                if (element["scale"] == 10) {
                    ImgUrl = "Source/int1.png"
                    PointShindo = "震度1";
                    PointColor = Color_1;
                    PointInt = 10;
                } else if (element["scale"] == 20) {
                    ImgUrl = "Source/int2.png"
                    PointColor = Color_2;
                    PointShindo = "震度2";
                    PointInt = 20;
                } else if (element["scale"] == 30) {
                    ImgUrl = "Source/int3.png"
                    PointColor = Color_3;
                    PointShindo = "震度3";
                    PointInt = 30;
                } else if (element["scale"] == 40) {
                    ImgUrl = "Source/int4.png"
                    PointColor = Color_4;
                    PointShindo = "震度4";
                    PointInt = 40;
                } else if (element["scale"] == 45) {
                    ImgUrl = "Source/int50.png"
                    PointColor = Color_50;
                    PointShindo = "震度5弱";
                    PointInt = 50;
                } else if (element["scale"] == 46) {
                    ImgUrl = "Source/int50.png"
                    PointColor = Color_50;
                    PointShindo = "震度5弱以上と推定";
                    PointColor = 50;
                } else if (element["scale"] == 50) {
                    ImgUrl = "Source/int55.png"
                    PointColor = Color_55;
                    PointShindo = "震度5強";
                    PointInt = 55;
                } else if (element["scale"] == 55) {
                    ImgUrl = "Source/int60.png"
                    PointColor = Color_60;
                    PointShindo = "震度6弱";
                    PointInt = 60;
                } else if (element["scale"] == 60) {
                    ImgUrl = "Source/int65.png"
                    PointColor = Color_65;
                    PointShindo = "震度6強";
                    PointInt = 65;
                } else if (element["scale"] == 70) {
                    ImgUrl = "Source/int7.png"
                    PointColor = Color_7;
                    PointShindo = "震度7";
                    PointInt = 70;
                }

                var geojsonFeature = [{
                    "type": "Feature",
                    "geometry": {
                        "type": "Point",
                        "coordinates": [JMAPointsJson[result]["lon"], JMAPointsJson[result]["lat"]]
                    }
                }];

                if (Quake_Mode == 0 || Quake_Mode == 1) {

                    L.geoJson(geojsonFeature,
                        {
                            onEachFeature: function (feature, layer) {
                                if (feature.properties && feature.properties.popupContent) {
                                    layer.bindPopup(feature.properties.popupContent);
                                }
                                layer.myTag = "Shindo"
                            },
                            pointToLayer: function (feature, latlng) {
                                var myIcon = L.icon({
                                    iconUrl: ImgUrl,
                                    iconSize: [25, 25],
                                    popupAnchor: [0, -40]
                                });
                                return L.marker(latlng, { icon: myIcon, zIndexOffset: element["scale"] });
                            }
                        }
                    ).addTo(map).bindPopup(element["addr"] + "<br>" + PointShindo);
                }

                if (Quake_Mode != 2) {
                    marker.addLayer(L.geoJson(geojsonFeature,
                        {
                            onEachFeature: function (feature, layer) {
                                if (feature.properties && feature.properties.popupContent) {
                                    layer.bindPopup(feature.properties.popupContent);
                                }
                                layer.myTag = "Shindo"
                            },
                            pointToLayer: function (feature, latlng) {
                                var myIcon = L.icon({
                                    iconUrl: ImgUrl,
                                    iconSize: [25, 25],
                                    popupAnchor: [0, -40]
                                });
                                return L.marker(latlng, { icon: myIcon, zIndexOffset: element["scale"] });
                            }
                        }
                    ));
                }

                if (Quake_Mode == 3) {
                    var array_Num = CityCode.indexOf(JMAPointsJson[result]["city"]["code"]);
                    if (CityMaxShindo[array_Num] < PointInt || CityMaxShindo[array_Num] == undefined) {
                        CityMaxShindo[array_Num] = PointInt;
                    }
                    console.log(array_Num);
                }

                if (Quake_Mode == 1 || Quake_Mode == 2 || Quake_Mode == 3) {
                    if (AreaMaxShindo[Number(JMAPointsJson[result]["area"]["code"])] < element["scale"]) {
                    } else if (AreaMaxShindo[Number(JMAPointsJson[result]["area"]["code"])] === undefined) {
                        AreaMaxShindo[Number(JMAPointsJson[result]["area"]["code"])] = element["scale"];
                    }
                }
            }
        });

        if (Quake_Mode == 3) {
            for (let iii = 0; iii < CityMaxShindo.length; iii++) {
                var element = CityMaxShindo[iii];
                var ImgUrl = "";
                var PointShindo = "";
                var PointColor;
                if (element == "10") {
                    ImgUrl = "Source/int1.jpg"
                    PointShindo = "震度1";
                    PointColor = Color_1;
                } else if (element == "20") {
                    ImgUrl = "Source/int2.jpg"
                    PointColor = Color_2;
                    PointShindo = "震度2";
                } else if (element == "30") {
                    ImgUrl = "Source/int3.jpg"
                    PointColor = Color_3;
                    PointShindo = "震度3";
                } else if (element == "40") {
                    ImgUrl = "Source/int4.jpg"
                    PointColor = Color_4;
                    PointShindo = "震度4";
                } else if (element == "50") {
                    ImgUrl = "Source/int50.jpg"
                    PointColor = Color_50;
                    PointShindo = "震度5弱";
                } else if (element == "50") {
                    ImgUrl = "Source/int50.jpg"
                    PointColor = Color_50;
                    PointShindo = "震度5弱以上と推定";
                } else if (element == "55") {
                    ImgUrl = "Source/int55.jpg"
                    PointColor = Color_55;
                    PointShindo = "震度5強";
                } else if (element == "60") {
                    ImgUrl = "Source/int60.jpg"
                    PointColor = Color_60;
                    PointShindo = "震度6弱";
                } else if (element == "65") {
                    ImgUrl = "Source/int65.jpg"
                    PointColor = Color_65;
                    PointShindo = "震度6強";
                } else if (element == "70") {
                    ImgUrl = "Source/int7.jpg"
                    PointColor = Color_7;
                    PointShindo = "震度7";
                }

                if (PointShindo != "") {
                    FillPolygon(2, CityCode[iii], PointColor);
                    console.log(CityCode[iii]);
                }

                //console.log(element);
            }
        }

        for (let iii = 0; iii < AreaMaxShindo.length; iii++) {
            var element = AreaMaxShindo[iii];
            var ImgUrl = "";
            var PointShindo = "";
            var PointColor;
            if (element == "10") {
                ImgUrl = "Source/int1.jpg"
                PointShindo = "震度1";
                PointColor = Color_1;
            } else if (element == "20") {
                ImgUrl = "Source/int2.jpg"
                PointColor = Color_2;
                PointShindo = "震度2";
            } else if (element == "30") {
                ImgUrl = "Source/int3.jpg"
                PointColor = Color_3;
                PointShindo = "震度3";
            } else if (element == "40") {
                ImgUrl = "Source/int4.jpg"
                PointColor = Color_4;
                PointShindo = "震度4";
            } else if (element == "45") {
                ImgUrl = "Source/int50.jpg"
                PointColor = Color_50;
                PointShindo = "震度5弱";
            } else if (element == "46") {
                ImgUrl = "Source/int50.jpg"
                PointColor = Color_50;
                PointShindo = "震度5弱以上と推定";
            } else if (element == "50") {
                ImgUrl = "Source/int55.jpg"
                PointColor = Color_55;
                PointShindo = "震度5強";
            } else if (element == "55") {
                ImgUrl = "Source/int60.jpg"
                PointColor = Color_60;
                PointShindo = "震度6弱";
            } else if (element == "60") {
                ImgUrl = "Source/int65.jpg"
                PointColor = Color_65;
                PointShindo = "震度6強";
            } else if (element == "70") {
                ImgUrl = "Source/int7.jpg"
                PointColor = Color_7;
                PointShindo = "震度7";
            }

            if (PointShindo != "") {
                if (Quake_Mode != 3) {
                    FillPolygon(1, iii.toString(), PointColor);
                }
                if (Quake_Mode == 2 || Quake_Mode == 3) {

                    MapShow_Name(1, iii.toString());
                    var array_Num = AreaCode.indexOf(iii.toString());

                    var Center_Latitude = Saibun_Center_Latitude[array_Num];
                    var Center_Longitude = Saibun_Center_Longitude[array_Num];

                    var geojsonFeature = [{
                        "type": "Feature",
                        "geometry": {
                            "type": "Point",
                            "coordinates": [Center_Longitude, Center_Latitude]
                        }
                    }];

                    //console.log(Center_Latitude);
                    //console.log(Center_Latitude);

                    L.geoJson(geojsonFeature,
                        {
                            onEachFeature: function (feature, layer) {
                                if (feature.properties && feature.properties.popupContent) {
                                    layer.bindPopup(feature.properties.popupContent);
                                }
                                layer.myTag = "Shindo"
                            },
                            pointToLayer: function (feature, latlng) {
                                var myIcon = L.icon({
                                    iconUrl: ImgUrl,
                                    iconSize: [35, 35],
                                    popupAnchor: [0, -40]
                                });
                                return L.marker(latlng, { icon: myIcon, zIndexOffset: element["scale"] });
                            }
                        }
                    ).addTo(map).bindPopup(AreaCodeToName(iii.toString()) + "<br>" + PointShindo);
                    marker.addLayer(L.geoJson(geojsonFeature,
                        {
                            onEachFeature: function (feature, layer) {
                                if (feature.properties && feature.properties.popupContent) {
                                    layer.bindPopup(feature.properties.popupContent);
                                }
                                layer.myTag = "Shindo"
                            },
                            pointToLayer: function (feature, latlng) {
                                var myIcon = L.icon({
                                    iconUrl: ImgUrl,
                                    iconSize: [25, 25],
                                    popupAnchor: [0, -40]
                                });
                                return L.marker(latlng, { icon: myIcon, zIndexOffset: element["scale"] });
                            }
                        }
                    ));
                }
            }
        }
    } else {
        //震度速報

        map.eachLayer(function (layer) {
            if (layer.myTag && layer.myTag === "Shindo") {
                map.removeLayer(layer)
            }
            if (layer.myTag && layer.myTag === "Shingen") {
                map.removeLayer(layer)
            }
            if (layer.myTag && layer.myTag === "Filled") {
                map.removeLayer(layer)
            }
        })

        QuakeJson[num]["points"].forEach(element => {
            var ImgUrl = "";
            var PointShindo = "";
            var PointColor;
            if (element["scale"] == 10) {
                ImgUrl = "Source/int1.jpg"
                PointShindo = "震度1";
                PointColor = Color_1;
            } else if (element["scale"] == 20) {
                ImgUrl = "Source/int2.jpg"
                PointColor = Color_2;
                PointShindo = "震度2";
            } else if (element["scale"] == 30) {
                ImgUrl = "Source/int3.jpg"
                PointColor = Color_3;
                PointShindo = "震度3";
            } else if (element["scale"] == 40) {
                ImgUrl = "Source/int4.jpg"
                PointColor = Color_4;
                PointShindo = "震度4";
            } else if (element["scale"] == 45) {
                ImgUrl = "Source/int50.jpg"
                PointColor = Color_50;
                PointShindo = "震度5弱";
            } else if (element["scale"] == 46) {
                ImgUrl = "Source/int50.jpg"
                PointColor = Color_50;
                PointShindo = "震度5弱以上と推定";
            } else if (element["scale"] == 50) {
                ImgUrl = "Source/int55.jpg"
                PointColor = Color_55;
                PointShindo = "震度5強";
            } else if (element["scale"] == 55) {
                ImgUrl = "Source/int60.jpg"
                PointColor = Color_60;
                PointShindo = "震度6弱";
            } else if (element["scale"] == 60) {
                ImgUrl = "Source/int65.jpg"
                PointColor = Color_65;
                PointShindo = "震度6強";
            } else if (element["scale"] == 70) {
                ImgUrl = "Source/int7.jpg"
                PointColor = Color_7;
                PointShindo = "震度7";
            }

            var area_Code = AreaNameToCode(element["addr"]);
            FillPolygon(1, area_Code, PointColor);
            MapShow_Name(1, area_Code);

            var array_Num = AreaCode.indexOf(area_Code);

            var Center_Latitude = Saibun_Center_Latitude[array_Num];
            var Center_Longitude = Saibun_Center_Longitude[array_Num];

            var geojsonFeature = [{
                "type": "Feature",
                "geometry": {
                    "type": "Point",
                    "coordinates": [Center_Longitude, Center_Latitude]
                }
            }];
            L.geoJson(geojsonFeature,
                {
                    onEachFeature: function (feature, layer) {
                        if (feature.properties && feature.properties.popupContent) {
                            layer.bindPopup(feature.properties.popupContent);
                        }
                        layer.myTag = "Shindo"
                    },
                    pointToLayer: function (feature, latlng) {
                        var myIcon = L.icon({
                            iconUrl: ImgUrl,
                            iconSize: [40, 40],
                            popupAnchor: [0, -40]
                        });
                        return L.marker(latlng, { icon: myIcon, zIndexOffset: element["scale"] });
                    }
                }
            ).addTo(map).bindPopup(element["addr"] + "<br>" + PointShindo);

            marker.addLayer(L.geoJson(geojsonFeature,
                {
                    onEachFeature: function (feature, layer) {
                        if (feature.properties && feature.properties.popupContent) {
                            layer.bindPopup(feature.properties.popupContent);
                        }
                        layer.myTag = "Shindo"
                    },
                    pointToLayer: function (feature, latlng) {
                        var myIcon = L.icon({
                            iconUrl: ImgUrl,
                            iconSize: [25, 25],
                            popupAnchor: [0, -40]
                        });
                        return L.marker(latlng, { icon: myIcon, zIndexOffset: element["scale"] });
                    }
                }
            ));
        })
    }

    if (QuakeJson[num]["issue"]["type"] == "DetailScale" || QuakeJson[num]["issue"]["type"] == "ScaleAndDestination") {
        if (Quake_Mode != 2) {
            map.fitBounds(marker.getBounds());
        } else {
            map.fitBounds(marker.getBounds(), { maxZoom: 8 });
        }
    } else if (QuakeJson[num]["issue"]["type"] == "Destination") {
        if (Number(QuakeJson[num]["earthquake"]["hypocenter"]["magnitude"]).toFixed(1) < 5.5) {
            map.flyTo(new L.LatLng(QuakeJson[num]["earthquake"]["hypocenter"]["latitude"], QuakeJson[num]["earthquake"]["hypocenter"]["longitude"]), 30 / (Number(QuakeJson[num]["earthquake"]["hypocenter"]["magnitude"]).toFixed(1)), { duration: 1 });
        } else {
            map.flyTo(new L.LatLng(QuakeJson[num]["earthquake"]["hypocenter"]["latitude"], QuakeJson[num]["earthquake"]["hypocenter"]["longitude"]), 45 / (Number(QuakeJson[num]["earthquake"]["hypocenter"]["magnitude"]).toFixed(1)), { duration: 1 });
        }
    } else if (QuakeJson[num]["issue"]["type"] == "ScalePrompt") {
        map.fitBounds(marker.getBounds(), { maxZoom: 8 });
    } else if (QuakeJson[num]["issue"]["type"] == "Foreign") {
        map.flyTo(new L.LatLng(QuakeJson[num]["earthquake"]["hypocenter"]["latitude"], QuakeJson[num]["earthquake"]["hypocenter"]["longitude"]), 3, { duration: 1 });
    }
    var maxScale;
    var maxColor;
    var MojiColor;
    if (QuakeJson[num]["earthquake"]["maxScale"] == 10) {
        maxScale = "1";
        maxColor = "rgb(70, 100, 110)";
        MojiColor = "rgb(255, 255, 255)";
    } else if (QuakeJson[num]["earthquake"]["maxScale"] == 20) {
        maxScale = "2";
        maxColor = "rgb(30, 110, 230)";
        MojiColor = "rgb(255, 255, 255)";
    } else if (QuakeJson[num]["earthquake"]["maxScale"] == 30) {
        maxScale = "3";
        maxColor = "rgb(0, 200, 200)";
        MojiColor = "rgb(0, 0, 0)";
    } else if (QuakeJson[num]["earthquake"]["maxScale"] == 40) {
        maxScale = "4";
        maxColor = "rgb(250, 250, 100)";
        MojiColor = "rgb(0, 0, 0)";
    } else if (QuakeJson[num]["earthquake"]["maxScale"] == 45) {
        maxScale = "5弱";
        maxColor = "rgb(255, 180, 0)";
        MojiColor = "rgb(0, 0, 0)";
    } else if (QuakeJson[num]["earthquake"]["maxScale"] == 50) {
        maxScale = "5強";
        maxColor = "rgb(255, 120, 0)";
        MojiColor = "rgb(0, 0, 0)";
    } else if (QuakeJson[num]["earthquake"]["maxScale"] == 55) {
        maxScale = "6弱";
        maxColor = "rgb(230, 0, 0)";
        MojiColor = "rgb(255, 255, 255)";
    } else if (QuakeJson[num]["earthquake"]["maxScale"] == 60) {
        maxScale = "6強";
        maxColor = "rgb(160, 0, 0)";
        MojiColor = "rgb(255, 255, 255)";
    } else if (QuakeJson[num]["earthquake"]["maxScale"] == 70) {
        maxScale = "7";
        maxColor = "rgb(150, 0, 150)";
        MojiColor = "rgb(255, 255, 255)";
    } else {
        maxScale = "不明";
        maxColor = "rgb(0, 139, 139)";
        MojiColor = "rgb(255, 255, 255)";
    }
    document.getElementById("quakeinfo").style.backgroundColor = maxColor;
    document.getElementById("quakeinfo").style.color = MojiColor;

    var tsunamiText = ""
    if (QuakeJson[num]["earthquake"]["domesticTsunami"] == "None") {
        tsunamiText = "津波の心配はありません。"
    } else if (QuakeJson[num]["earthquake"]["domesticTsunami"] == "Checking") {
        tsunamiText = "津波の有無を調査中です。"
    } else if (QuakeJson[num]["earthquake"]["domesticTsunami"] == "NonEffective") {
        tsunamiText = "津波被害の心配はありません。"
    } else {
        tsunamiText = "津波情報が発表されています。"
    }

    if (QuakeJson[num]["issue"]["type"] != "ScalePrompt" && QuakeJson[num]["issue"]["type"] != "Foreign") {
        document.getElementById("hypo").innerText = QuakeJson[num]["earthquake"]["hypocenter"]["name"];
        document.getElementById("time").innerText = QuakeJson[num]["earthquake"]["time"].slice(0, -3) + "発生";
        if (QuakeJson[num]["earthquake"]["hypocenter"]["magnitude"] == -1) {
            document.getElementById("mag").innerText = "規模 : 不明";
        } else {
            document.getElementById("mag").innerText = "規模 : M" + Number(QuakeJson[num]["earthquake"]["hypocenter"]["magnitude"]).toFixed(1);
        }

        if (QuakeJson[num]["earthquake"]["hypocenter"]["depth"] == 0) {
            document.getElementById("depth").innerText = "深さ : ごく浅い";
        } else if (QuakeJson[num]["earthquake"]["hypocenter"]["depth"] == -1) {
            document.getElementById("depth").innerText = "深さ : 不明";
        } else {
            document.getElementById("depth").innerText = "深さ : " + QuakeJson[num]["earthquake"]["hypocenter"]["depth"] + "km";
        }
        document.getElementById("tsunami").innerText = tsunamiText;
        document.getElementById("maxshindo").innerText = "最大震度 : " + maxScale;
    } else if (QuakeJson[num]["issue"]["type"] == "Foreign") {
        document.getElementById("hypo").innerText = QuakeJson[num]["earthquake"]["hypocenter"]["name"];
        document.getElementById("time").innerText = QuakeJson[num]["earthquake"]["time"].slice(0, -3) + "発生";

        if (QuakeJson[num]["earthquake"]["hypocenter"]["depth"] == -1 && QuakeJson[num]["earthquake"]["hypocenter"]["magnitude"] == -1) {
            document.getElementById("mag").innerText = "大規模な噴火";
            document.getElementById("depth").innerText = "";
            document.getElementById("maxshindo").innerText = "";
        } else {
            if (QuakeJson[num]["earthquake"]["hypocenter"]["magnitude"] == -1) {
                document.getElementById("mag").innerText = "規模 : 不明";
            } else {
                document.getElementById("mag").innerText = "規模 : M" + Number(QuakeJson[num]["earthquake"]["hypocenter"]["magnitude"]).toFixed(1);
            }

            if (QuakeJson[num]["earthquake"]["hypocenter"]["depth"] == 0) {
                document.getElementById("depth").innerText = "深さ : ごく浅い";
            } else if (QuakeJson[num]["earthquake"]["hypocenter"]["depth"] == -1) {
                document.getElementById("depth").innerText = "深さ : 不明";
            } else {
                document.getElementById("depth").innerText = "深さ : " + QuakeJson[num]["earthquake"]["hypocenter"]["depth"] + "km";
            }

            document.getElementById("maxshindo").innerText = "";
        }
        document.getElementById("tsunami").innerText = tsunamiText;
    } else {
        document.getElementById("hypo").innerText = QuakeJson[num]["points"][0]["addr"] + "など";
        document.getElementById("time").innerText = QuakeJson[num]["earthquake"]["time"].slice(0, -3) + "発生";
        document.getElementById("mag").innerText = "規模 : 不明";
        document.getElementById("depth").innerText = "深さ : 不明";
        document.getElementById("tsunami").innerText = tsunamiText;
        document.getElementById("maxshindo").innerText = "最大震度 : " + maxScale;
    }

}

async function GetJson() {
    const url = "Source/JMAstations.json";
    const response = await fetch(url)
        .then(response => response.json())
        .then(data => {
            JMAPointsJson = data;

            JMAPointsJson.forEach(element => {
                JMAPoints[JMAPoints.length] = element.name;
            });
        });
}

function about() {
    window.location.href = "about.html";
}

//EEW
async function GetEEW() {
    var date = new Date();
    date.setSeconds(date.getSeconds() - 3);
    date.setMinutes(date.getMinutes() - anyMin);
    const NowTime = date.getFullYear() + '' + ('0' + (date.getMonth() + 1)).slice(-2) + '' + ('0' + date.getDate()).slice(-2) + '' + ('0' + date.getHours()).slice(-2) + '' + ('0' + date.getMinutes()).slice(-2) + '' + ('0' + date.getSeconds()).slice(-2);
    const NowClockTime = date.getFullYear() + '/' + ('0' + (date.getMonth() + 1)).slice(-2) + '/' + ('0' + date.getDate()).slice(-2) + ' ' + ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2) + ':' + ('0' + date.getSeconds()).slice(-2);
    const NowDay = date.getFullYear() + '' + ('0' + (date.getMonth() + 1)).slice(-2) + '' + ('0' + date.getDate()).slice(-2);
    const url = "https://weather-kyoshin.east.edge.storage-yahoo.jp/RealTimeData/" + NowDay + "/" + NowTime + ".json";

    if (EEW_Use == 1) {
        if (GetTiming >= GetEEWInterval - 1) {
            const response = await fetch(url)
                .then(response => response.json())
                .then(data => {
                    EEWJson = data;
                    if (data["psWave"] != null && data["hypoInfo"] != null) {
                        ShowEEW(data);
                    } else if (NowMode == 1) {
                        Auto_changed = false;
                        QuakeSelect(0);
                    } else {
                        Auto_changed = false;
                    }
                    ShowKMoni(data);
                })
            GetTiming = 0;
        } else {
            GetTiming++;
        }
    }
    document.getElementById("Clock").innerText = NowClockTime;
}

function ShowEEW(Json) {
    if (Auto_changed == true) {
        return;
    }
    NowMode = 1;
    document.getElementById("NowMode").innerText = "緊急地震速報画面";
    map.eachLayer(function (layer) {

        if (layer.myTag && layer.myTag === "Shindo") {
            map.removeLayer(layer)
        }
        if (layer.myTag && layer.myTag === "Shingen") {
            map.removeLayer(layer)
        }
        if (layer.myTag && layer.myTag === "Filled") {
            map.removeLayer(layer)
        }
        layer = null;
    });

    var Final = "";
    if (Json["hypoInfo"]["items"][0]["isFinal"] == "true") {
        Final = "※最終報";
    }

    var timeDate = new Date(Date.parse(Json["hypoInfo"]["items"][0]["originTime"]));
    var time = timeDate.getFullYear() + '/' + ('0' + (timeDate.getMonth() + 1)).slice(-2) + '/' + ('0' + timeDate.getDate()).slice(-2) + ' ' + ('0' + timeDate.getHours()).slice(-2) + ':' + ('0' + timeDate.getMinutes()).slice(-2) + ':' + ('0' + timeDate.getSeconds()).slice(-2);
    document.getElementById("hypo").innerText = Json["hypoInfo"]["items"][0]["regionName"];
    document.getElementById("time").innerText = time + "発生";
    document.getElementById("mag").innerText = "規模 : M" + Number(Json["hypoInfo"]["items"][0]["magnitude"]).toFixed(1);
    document.getElementById("depth").innerText = "深さ : " + Json["hypoInfo"]["items"][0]["depth"];
    document.getElementById("tsunami").innerText = "緊急地震速報 第" + Json["hypoInfo"]["items"][0]["reportNum"] + "報" + Final;

    var maxScale;
    var maxColor;
    var MojiColor;
    if (Json["hypoInfo"]["items"][0]["calcintensity"] == "01") {
        maxScale = "1";
        maxColor = "rgb(70, 100, 110)";
        MojiColor = "rgb(255, 255, 255)";
    } else if (Json["hypoInfo"]["items"][0]["calcintensity"] == "02") {
        maxScale = "2";
        maxColor = "rgb(30, 110, 230)";
        MojiColor = "rgb(255, 255, 255)";
    } else if (Json["hypoInfo"]["items"][0]["calcintensity"] == "03") {
        maxScale = "3";
        maxColor = "rgb(0, 200, 200)";
        MojiColor = "rgb(0, 0, 0)";
    } else if (Json["hypoInfo"]["items"][0]["calcintensity"] == "04") {
        maxScale = "4";
        maxColor = "rgb(250, 250, 100)";
        MojiColor = "rgb(0, 0, 0)";
    } else if (Json["hypoInfo"]["items"][0]["calcintensity"] == "5-") {
        maxScale = "5弱";
        maxColor = "rgb(255, 180, 0)";
        MojiColor = "rgb(0, 0, 0)";
    } else if (Json["hypoInfo"]["items"][0]["calcintensity"] == "5+") {
        maxScale = "5強";
        maxColor = "rgb(255, 120, 0)";
        MojiColor = "rgb(0, 0, 0)";
    } else if (Json["hypoInfo"]["items"][0]["calcintensity"] == "6-") {
        maxScale = "6弱";
        maxColor = "rgb(230, 0, 0)";
        MojiColor = "rgb(255, 255, 255)";
    } else if (Json["hypoInfo"]["items"][0]["calcintensity"] == "6+") {
        maxScale = "6強";
        maxColor = "rgb(160, 0, 0)";
        MojiColor = "rgb(255, 255, 255)";
    } else if (Json["hypoInfo"]["items"][0]["calcintensity"] == "07") {
        maxScale = "7";
        maxColor = "rgb(150, 0, 150)";
        MojiColor = "rgb(255, 255, 255)";
    } else {
        maxScale = "不明";
        maxColor = "rgb(0, 139, 139)";
        MojiColor = "rgb(255, 255, 255)";
    }
    document.getElementById("maxshindo").innerText = "推定最大震度 : " + maxScale;

    document.getElementById("quakeinfo").style.backgroundColor = maxColor;
    document.getElementById("quakeinfo").style.color = MojiColor;

    var geojsonFeature = [{
        "type": "Feature",
        "geometry": {
            "type": "Point",
            "coordinates": [Json["hypoInfo"]["items"][0]["longitude"].slice(1), Json["hypoInfo"]["items"][0]["latitude"].slice(1)]
        }
    }];
    L.geoJson(geojsonFeature,
        {
            onEachFeature: function (feature, layer) {
                if (feature.properties && feature.properties.popupContent) {
                    layer.bindPopup(feature.properties.popupContent);
                }
                layer.myTag = "Shingen"
            },
            pointToLayer: function (feature, latlng) {
                var myIcon = L.icon({
                    iconUrl: 'Source/Singen.png',
                    iconSize: [50, 50],
                    popupAnchor: [0, -40]
                });
                return L.marker(latlng, { icon: myIcon, zIndexOffset: 100 });
            }
        }
    ).addTo(map);

    var Pr = Json["psWave"]["items"][0]["pRadius"] * 1000;
    var Sr = Json["psWave"]["items"][0]["sRadius"] * 1000;
    var center = new L.LatLng(Json["hypoInfo"]["items"][0]["latitude"].slice(1), Json["hypoInfo"]["items"][0]["longitude"].slice(1));
    PW.setLatLng(center);
    SW.setLatLng(center);
    PW.setRadius(Pr);
    SW.setRadius(Sr);
    if ((Number(Json["hypoInfo"]["items"][0]["magnitude"]).toFixed(1)) < 5.5) {
        map.flyTo(new L.LatLng(Json["hypoInfo"]["items"][0]["latitude"].slice(1), Json["hypoInfo"]["items"][0]["longitude"].slice(1)), 30 / (Number(Json["hypoInfo"]["items"][0]["magnitude"]).toFixed(1)), { duration: 0.5 });
    } else {
        map.flyTo(new L.LatLng(Json["hypoInfo"]["items"][0]["latitude"].slice(1), Json["hypoInfo"]["items"][0]["longitude"].slice(1)), 45 / (Number(Json["hypoInfo"]["items"][0]["magnitude"]).toFixed(1)), { duration: 0.5 });
    }
}

function test() {
    num = window.prompt("何分遡りますか？", "");
    anyMin = num;
}

function setting() {
    window.location.href = "setting.html";
}

function AreaNameToCode(Name) {
    var array_Num = AreaName.indexOf(Name);
    return AreaCode[array_Num];
}
function AreaCodeToName(code) {
    var array_Num = AreaCode.indexOf(code);
    return AreaName[array_Num];
}

function FillPolygon(mode, num, color) {
    try {
        if (mode == 1) {
            //細分区域塗りつぶし
            var array_Num = AreaCode.indexOf(num);
            if (array_Num != -1) {
                var style = {
                    "color": "#FFFFFF",
                    "weight": 0.7,
                    "fillColor": color,
                    fillOpacity: 1
                }
                var data = JsonString_Saibun["features"][array_Num];
                Filled_Layer = L.geoJSON(data, {
                    style: style,
                    onEachFeature: function (feature, layer) {
                        if (feature.properties && feature.properties.popupContent) {
                            layer.bindPopup(feature.properties.popupContent);
                        }
                        layer.myTag = "Filled"
                    },
                });
                map.addLayer(Filled_Layer);
            }
            console.log(array_Num);
        } else if (mode == 2) {
            //市区町村塗りつぶし

            var array_Num = CityCode.indexOf(num);
            if (array_Num != -1) {
                var style = {
                    "color": "#FFFFFF",
                    "weight": 0,
                    "fillColor": color,
                    fillOpacity: 1
                }
                var data = JsonString_Cities["features"][array_Num];
                Filled_Layer = L.geoJSON(data, {
                    style: style,
                    onEachFeature: function (feature, layer) {
                        if (feature.properties && feature.properties.popupContent) {
                            layer.bindPopup(feature.properties.popupContent);
                        }
                        layer.myTag = "Filled"
                    },
                });
                map.addLayer(Filled_Layer);
            }
            console.log(array_Num);
        }
    } catch (e) {
        console.log(e.message);
    }
}
function footer() {
    if (footer_open == false) {
        document.getElementById("footer").style.visibility = "visible";
        document.getElementById("footerbutton").innerText = "×";
        document.getElementById("footerbutton").style.bottom = "160px";
        footer_open = true;
    } else {
        document.getElementById("footer").style.visibility = "hidden";
        document.getElementById("footerbutton").innerText = "⌂";
        document.getElementById("footerbutton").style.bottom = "0px";
        footer_open = false;
    }
}

function MapShow_Name(mode, code) {
    if (mode == 1) {
        var name = AreaCodeToName(code);
        var array_Num = AreaCode.indexOf(code);
        var Center_Latitude = Saibun_Center_Latitude[array_Num];
        var Center_Longitude = Saibun_Center_Longitude[array_Num];

        var divIcon1 = L.divIcon({
            html: '<font size="5.5" style="font-weight: bolder; text-shadow: -1.5px -1.5px 0 black, 1.5px -1.5px 0 black, -1.5px 1.5px 0 black, 1.5px 1.5px 0 black;">' + name + '</font>',
            className: 'divicon1',
            iconSize: [500, 50],
            iconAnchor: [-30, 15]
        });
        var hoge_layer = L.marker([Center_Latitude, Center_Longitude], {
            icon: divIcon1,
            onEachFeature: function (feature, layer) {
                if (feature.properties && feature.properties.popupContent) {
                    layer.bindPopup(feature.properties.popupContent);
                }
                layer.myTag = "Filled"
            },
        });
        Moji_Layer.addLayer(hoge_layer);
        map.addLayer(Moji_Layer);
    } else if (mode == 2) {

    }
}

function ShowKMoni(json) {
    //var aaa = 0;
    //map.eachLayer(function (layer) {
    //    aaa++;
    //});
    //console.log(aaa);

    if (KMoni_Use == 0) {
        return;
    }

    KMoni_Layer.clearLayers();

    var intensity = json["realTimeData"]["intensity"];

    var a = 0;
    PointList["items"].forEach(point => {
        //console.log(point[0] + "," + point[1]);

        var circle = L.circleMarker([point[0], point[1]], {
            radius: radius,
            color: ConvertStringToColor(intensity.charAt(a)),
            fillOpacity: 1
        })

        KMoni_Layer.addLayer(circle);
        a++;
    });
    map.addLayer(KMoni_Layer);
}

function ConvertStringToColor(string) {
    //console.log(colorList[string]);
    return colorList[string];
}
